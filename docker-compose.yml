services:
  web:
    image: nginx:alpine
    container_name: nginx-site
    volumes:
      - "./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf"
      - "./web:/var/www/html"
      - "./docker/nginx/default.template.conf:/etc/nginx/conf.d/default.template"
    ports:
      - "8000:80"
      - "3000:443"
    environment:
      - NGINX_HOST=${NGINX_HOST}
      - VIRTUAL_HOST=${VIRTUAL_HOST}  # Добавление виртуального хоста
    command: /bin/sh -c "envsubst '$$NGINX_HOST $$VIRTUAL_HOST' < /etc/nginx/conf.d/default.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    restart: always
    depends_on:
      - php
      - mysqldb
    networks:
      - php-wfm-ishop

  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: php83-fpm
    volumes:
      - ./web:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
    restart: always
    networks:
      - php-wfm-ishop

  composer:
    image: "composer"
    container_name: composer-container
    volumes:
      - "./web:/app"
    command: install
    networks:
      - php-wfm-ishop

  myadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    ports:
      - "8080:80"
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=${MYSQL_HOST}
    restart: always
    depends_on:
      - mysqldb
    networks:
      - php-wfm-ishop

  mysqldb:
    image: mysql:${MYSQL_VERSION}
    container_name: ${MYSQL_HOST}
    restart: always
    env_file:
      - ".env"
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "8989:3306"
    volumes:
      - "./data/db/mysql:/var/lib/mysql"
    networks:
      - php-wfm-ishop

networks:
  php-wfm-ishop:
    driver: bridge